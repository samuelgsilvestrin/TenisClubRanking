@model TennisClubRanking.Models.ViewModels.MatchResultViewModel

@{
    ViewData["Title"] = "Enter Match Result";
}

<div class="container mt-4">
    <h1>Enter Match Result</h1>

    <div class="card mb-4">
        <div class="card-header">
            Match Details
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Date:</strong> @Model.ScheduledDateTime.ToString("dd/MM/yyyy HH:mm")</p>
                </div>
                <div class="col-md-6">
                    <p><strong>Player 1:</strong> @Model.HomePlayerName</p>
                    <p><strong>Player 2:</strong> @Model.AwayPlayerName</p>
                </div>
            </div>
        </div>
    </div>

    <form asp-action="SaveResult" method="post">
        <input type="hidden" asp-for="MatchId" />
        
        <div class="row">
            <div class="col-md-4">
                <div class="form-group mb-3">
                    <label asp-for="FirstSetScore" class="form-label"></label>
                    <input asp-for="FirstSetScore" class="form-control" placeholder="e.g., 6-4" />
                    <span asp-validation-for="FirstSetScore" class="text-danger"></span>
                    <small class="form-text text-muted">Enter score as: Player1-Player2 (e.g., 6-4)</small>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="form-group mb-3">
                    <label asp-for="SecondSetScore" class="form-label"></label>
                    <input asp-for="SecondSetScore" class="form-control" placeholder="e.g., 6-4" />
                    <span asp-validation-for="SecondSetScore" class="text-danger"></span>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="form-group mb-3">
                    <label asp-for="ThirdSetScore" class="form-label"></label>
                    <input asp-for="ThirdSetScore" class="form-control" placeholder="e.g., 6-4" />
                    <span asp-validation-for="ThirdSetScore" class="text-danger"></span>
                </div>
            </div>
        </div>

        <div class="form-group mb-3">
            <label class="form-label">Winner</label>
            <div class="form-check">
                <input type="radio" class="form-check-input" name="WinnerId" value="@ViewBag.HomePlayerId" required />
                <label class="form-check-label">@Model.HomePlayerName</label>
            </div>
            <div class="form-check">
                <input type="radio" class="form-check-input" name="WinnerId" value="@ViewBag.AwayPlayerId" />
                <label class="form-check-label">@Model.AwayPlayerName</label>
            </div>
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Save Result</button>
            <a asp-action="Index" class="btn btn-secondary">Back to List</a>
        </div>
    </form>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $(document).ready(function() {
            // Add custom validation for score format
            function validateScore(input) {
                if (!input.value) return;
                var pattern = /^[0-7]-[0-7]$/;
                if (!pattern.test(input.value)) {
                    input.setCustomValidity('Score must be in format "6-4", "7-5", "7-6", etc.');
                } else {
                    // Additional validation for tennis score rules
                    var scores = input.value.split('-').map(Number);
                    var isValid = true;
                    var errorMessage = '';

                    // Check for valid tennis scores
                    if (scores[0] === 7 && scores[1] > 5) {
                        isValid = false;
                        errorMessage = 'Invalid score: When first number is 7, second must be 5 or less';
                    } else if (scores[1] === 7 && scores[0] > 5) {
                        isValid = false;
                        errorMessage = 'Invalid score: When second number is 7, first must be 5 or less';
                    } else if (scores[0] === 6 && scores[1] > 7) {
                        isValid = false;
                        errorMessage = 'Invalid score: Second number cannot be greater than 7';
                    } else if (scores[1] === 6 && scores[0] > 7) {
                        isValid = false;
                        errorMessage = 'Invalid score: First number cannot be greater than 7';
                    } else if (scores[0] < 6 && scores[1] < 6) {
                        isValid = false;
                        errorMessage = 'Invalid score: At least one player must have 6 or 7 points';
                    }

                    if (!isValid) {
                        input.setCustomValidity(errorMessage);
                    } else {
                        input.setCustomValidity('');
                    }
                }
            }

            // Apply validation to all score inputs
            $('input[name$="Score"]').each(function() {
                this.addEventListener('input', function() {
                    validateScore(this);
                });
                this.addEventListener('invalid', function() {
                    if (!this.validity.customError) {
                        this.setCustomValidity('Please enter a valid score (e.g., "6-4", "7-5", "7-6")');
                    }
                });
            });
        });
    </script>
}
